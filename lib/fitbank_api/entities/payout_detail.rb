# typed: strict
# frozen_string_literal: true

require 'bigdecimal'
require 'bigdecimal/util'
require 'date'
require 'uri'

module FitBankApi
  module Entities
    # Wrapper around the information returned by FitBank API for PIX payout
    class PayoutDetail
      extend T::Sig

      sig { returns(FitBankApi::Entities::BankInfo) }
      attr_reader :sender_bank_info, :receiver_bank_info

      sig { returns(FitBankApi::Entities::PayoutDetail::Status) }
      attr_reader :status

      sig { returns(String) }
      attr_reader :request_id, :fitbank_payout_id, :end_to_end_id, :receipt_url

      sig { returns(BigDecimal) }
      attr_reader :rate_value, :total_value

      # Describes all states which a PixOut can take.
      # Documentation: https://dev.fitbank.com.br/docs/3-payments
      # @note These statuses are both returned through webhooks and APIs. However, it's important to note that,
      #   while status PAID is returned through webhooks, it will be returned as SETTLED through APIs. Their
      #   function and meaning is the same, since they both indicate that the PIX payment was settled.
      #   On an other note, status CANCEL will be returned in webhooks, and status CANCELED will be returned
      #   through APIs. The meaning is the same in both situations, since they both refer to a canceled PIX payment.
      class Status < T::Enum
        extend T::Sig
        enums do
          # Created: Transaction has been initiated and will be processed
          Created = new
          # CanBeRegister: The account has been charged and the transaction is being processed
          CanBeRegister = new
          # Registering: Transaction has been prepared and will be registered in the SPI
          Registering = new
          # Registered: Transaction was registered in the SPI
          Registered = new
          # Error: Transaction processing error in the SPI
          Error = new
          # Settled: Settled transaction
          Settled = new
          # Canceled: Canceled transaction
          Canceled = new
        end
      end

      sig do
        params(
          sender_bank_info: FitBankApi::Entities::BankInfo,
          receiver_bank_info: FitBankApi::Entities::BankInfo,
          status: FitBankApi::Entities::PayoutDetail::Status,
          fitbank_payout_id: String,
          request_id: String,
          payment_date: DateTime,
          rate_value: BigDecimal,
          total_value: BigDecimal,
          receipt_url: String,
          end_to_end_id: String
        ).void
      end
      # Create PayoutDetail for FitBank PIX Payout
      # @param [FitBankApi::Entities::BankInfo] sender_bank_info Bank info for the entity performed the payout
      # @param [FitBankApi::Entities::BankInfo] receiver_bank_info Bank info for the customer received the payout
      # @param [FitBankApi::Entities::PayoutDetail::Status] The status of the payout.
      # @param [String] fitbank_payout_id The ID generated by FitBank as a response to
      #   GeneratePixOut endpoint (DocumentNumber)
      # @params [String] request_id The the indentifier in the caller system sent int GeneratePixOut body as Identifier
      # @params [DateTime] payment_date Date and time when the payout was creaded.
      #   @todo Check with FitBank the meaning of this.
      # @params [BigDecimal] rate_value The additinoal charges request by GeneratePixOut (RateValue)
      # @params [BigDecimal] total_value The total amount of the payout (additinoal charges + base value)
      # @receipt_url [String] receipt_url Link to a document proovnig the payment went through
      # @end_to_end_id [String] end_to_end_id Used by the central bank of brazil to identify the transaction
      #   @todo Check with FitBank the meaning of this.
      def initialize(
        sender_bank_info:,
        receiver_bank_info:,
        status:,
        fitbank_payout_id:,
        request_id:,
        payment_date:,
        rate_value:,
        total_value:,
        receipt_url:,
        end_to_end_id:
      )
        @sender_bank_info = sender_bank_info
        @receiver_bank_info = receiver_bank_info
        @status = status
        @fitbank_payout_id = fitbank_payout_id
        @request_id = request_id
        @payment_date = payment_date
        @rate_value = rate_value
        @total_value = total_value
        @receipt_url = receipt_url
        @end_to_end_id = end_to_end_id
      end

      sig { params(response_body: T::Hash[String, T.untyped]).returns(FitBankApi::Entities::PayoutDetail) }
      # Initialize the deails about a payout from the response body
      # returned by the API call.
      # @param [Hash] response_body The 'Infos' field of the response returned by FitBank API
      # @returns [FitBankApi::Entities::PayoutDetail] An object wrapping the detail info
      def self.from_response(response_body)
        sender_bank_info = FitBankApi::Entities::BankInfo.new(
          bank_code: response_body['FromBankCode'],
          bank_agency: response_body['FromBankBranch'],
          bank_account: response_body['FromBankAccount'],
          bank_account_digit: response_body['FromBankAccountDigit']
        )
        receiver_bank_info = FitBankApi::Entities::BankInfo.new(
          bank_code: response_body['ToBankCode'],
          bank_agency: response_body['ToBankBranch'],
          bank_account: response_body['ToBankAccount'],
          bank_account_digit: response_body['ToBankAccountDigit']
        )
        FitBankApi::Entities::PayoutDetail.new(
          sender_bank_info:,
          receiver_bank_info:,
          status: FitBankApi::Entities::PayoutDetail::Status.deserialize(response_body['Status']),
          fitbank_payout_id: response_body['DocumentNumber'],
          request_id: response_body['Identifier'],
          payment_date: DateTime.parse(response_body['PaymentDate']),
          rate_value: BigDecimal(response_body['RateValue']),
          total_value: BigDecimal(response_body['TotalValue']),
          receipt_url: response_body['ReceiptUrl'],
          end_to_end_id: response_body['EndToEndId']
        )
      end
    end
  end
end
